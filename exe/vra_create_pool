#!/usr/bin/env ruby

require 'hashdiff'
require 'resolv'
require 'optparse'
require 'yaml'
require_relative 'vra_create'
require 'kitchen/driver/vmpool_stores/gitlab_commit_store'
require 'socket'
require 'timeout'

include VraUtilities

# @return [Hash] - hash of config options
# reads from vmpool_config.yaml file if exists
def options
  @options ||= begin
    opts = File.exist?('vmpool_config.yaml') ? YAML.load_file('vmpool_config.yaml') : {}
  end
end

def create_pool(pool_data)
  (1..pool_data['size']).map do |num|
     puts pool_data['payload_file']
     submit_new_request(pool_data['payload_file']).id 
  end
end

# return hostnames or false
# @param [VRA::Request] - a request object
def resolve_vm_name(request)
  r = request 
  return r.resources.map(&:name) if r.successful? and r.completed?
  return false
end

def req_obj(id)
  client.requests.by_id(id)
end

# compares the before and after state of the store hashes
def store_changed?(before, after)
  HashDiff.diff(before, after).count > 0
end

# @return [Hash] - a store hash that contains one or more pools
# @option project_id [Integer] - the project id in gitlab
# @option pool_file [String] - the snipppet file name
def store(store_options = options)
  # create a new instance of the store with the provided options
  @store ||= Kitchen::Driver::VmpoolStores::GitlabCommitStore.new(store_options)
end

# creates the number of instances defined in the pool data
def create_pools
  @old_store = store.dup
  pools.map do |key, value|
    # convert the requests to vm names
    pools[key]['requests'] = value['requests'].find_all do |req|
       puts "Checking request: #{req}"
       r = req_obj(req)
       if r.completed?
         puts "The request #{req} has completed, getting hostname"
         hostnames = resolve_vm_name(r)
         # remove request from pool file by not returning anything
         # if hostname does not exist but request completed don't update pool
         if ! hostnames
           puts "Provisioning seemed to have failed for #{req}"
           puts "Removing request #{req} from pool #{key}"
           false
         else
           pools[key]['pool_instances'] = value['pool_instances'] + hostnames
           false
         end
       else 
         # has not completed
         # keep the request, since it is not finished
         puts "The request #{req} is still running"
         req
       end
    end

    # return the alive instances and save to the pool
    pools[key]['pool_instances'] = pools[key]['pool_instances'].find_all {|h| is_alive?(h) }

    # delete any old instances from used pool
    pools[key]['used_instances'] = pools[key]['used_instances'].find_all {|h| is_alive?(h) }

    # create the pool, and save the request in the requests
    # do not create if the number of systems and requests are more than the requested amount
    current_total = value['pool_instances'].count + pools[key]['requests'].count
    unless current_total >= value['size']
      reqs = create_pool(value)
      pools[key]['requests'] = reqs
    end
  end
  # prevents updates from occuring when they are not required
  store.save if store_changed?(@old_store, store)
end

# @return [Boolean] - true if the host is alive and listening
def is_alive?(node)
  has_dns_record?(node) && ssh_is_alive?(node)
end

# @return [Boolean] - true if the host is listening on 22, false otherwise
def ssh_is_alive?(node)
  puts "Checking if #{node} has ssh alive"
  begin
      Timeout::timeout(3) { TCPSocket.new(node, 22) }
      puts "Responded!!"
      return true
  rescue Errno::ECONNREFUSED
       puts "Connection refused"
      return false
  rescue SocketError
      puts "No connection!!"
      return false
  rescue Timeout::Error
      puts "No connection, timed out!!"
      return false
  end
end

# @return [Boolean] - true if the host is still in dns, false otherwise
def has_dns_record?(node)
  begin
    result = Resolv.getaddress(node)
  rescue Resolv::ResolvError
    result = false
  end
  result
end

# @return [Hash] - returns a hash of all the pools
def pools
   @pools ||= store.pool_data
end

# @return [Boolean] - true if options are valid
def valid_options?
  options['project_id'].to_i > 0
end

## main entry point

OptionParser.new do |opts|
  opts.on_head(<<-EOF

Summary: A tool used to create a pool of vra systems

  Example:
     #{File.basename(__FILE__)} -p 33 -f vmpool

  If you wish to store the config in a file, this script will read vmpool_config.yaml
  for the same configs.

  EOF
  )
  opts.on('-f', '--pool-file FILE', "Create the pools found in the given pool file") do |c|
    options['pool_file'] = c
  end
  opts.on('-p', '--project-id ID', "The gitlab project id") do |c|
    options['project_id'] = c.to_i
  end

end.parse!


if valid_options?
  create_pools
else
  puts "Invalid options: #{options.inspect}"
  exit 1
end
